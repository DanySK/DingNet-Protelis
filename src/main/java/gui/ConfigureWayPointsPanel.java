package gui;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import gui.mapviewer.WayPointPainter;
import gui.util.GUISettings;
import gui.util.GUIUtil;
import iot.Environment;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.OSMTileFactoryInfo;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCursor;
import org.jxmapviewer.painter.CompoundPainter;
import org.jxmapviewer.painter.Painter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.DefaultWaypoint;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.TileFactoryInfo;
import util.GraphStructure;
import util.MapHelper;

import javax.swing.*;
import javax.swing.event.MouseInputListener;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;
import java.util.*;

public class ConfigureWayPointsPanel {
    private JPanel mainPanel;
    private JPanel drawPanel;
    private JRadioButton addRadioBtn;
    private JPanel configurePanel;
    private JRadioButton deleteRadioBtn;
    private Environment environment;

    private static JXMapViewer mapViewer = new JXMapViewer();
    private static TileFactoryInfo info = new OSMTileFactoryInfo();
    private static DefaultTileFactory tileFactory = new DefaultTileFactory(info);
    private MainGUI parent;

    private Mode mode;


    ConfigureWayPointsPanel(Environment environment, MainGUI parent) {
        this.parent = parent;
        this.environment = environment;

        this.mode = Mode.ADD;

        loadMap(false);

        for (MouseListener ml : mapViewer.getMouseListeners()) {
            mapViewer.removeMouseListener(ml);
        }

        mapViewer.addMouseListener(new MapMouseAdapter());
        mapViewer.setZoom(6);
        mapViewer.addMouseWheelListener(new ZoomMouseWheelListenerCursor(mapViewer));
        MouseInputListener mia = new PanMouseInputListener(mapViewer);
        mapViewer.addMouseListener(mia);
        mapViewer.addMouseMotionListener(mia);

        addRadioBtn.addActionListener(e -> {
            if (deleteRadioBtn.isSelected()) {
                deleteRadioBtn.setSelected(false);
            }

            addRadioBtn.setSelected(true);
            this.mode = Mode.ADD;
        });

        deleteRadioBtn.addActionListener(e -> {
            if (addRadioBtn.isSelected()) {
                addRadioBtn.setSelected(false);
            }
            deleteRadioBtn.setSelected(true);
            this.mode = Mode.DELETE;
        });
    }

    public void refresh() {
        loadMap(true);
        parent.refresh();
    }

    private void loadMap(Boolean isRefresh) {
        mapViewer.setTileFactory(tileFactory);
        tileFactory.setThreadPoolSize(GUISettings.THREADPOOLSIZE);


        List<Painter<JXMapViewer>> painters = new ArrayList<>();

        // Draw the waypoints
        Set<DefaultWaypoint> set = new HashSet<>();
        WayPointPainter<DefaultWaypoint> waypointPainter = new WayPointPainter<>();
        for (GeoPosition waypoint : GraphStructure.getInstance().getWayPoints().values()) {
            set.add(new DefaultWaypoint(waypoint));
        }
        waypointPainter.setWaypoints(set);
        painters.add(waypointPainter);

        // Draw the borders
        painters.addAll(GUIUtil.getBorderPainters(environment.getMaxXpos(), environment.getMaxYpos()));


        CompoundPainter<JXMapViewer> painter = new CompoundPainter<>(painters);
        mapViewer.setOverlayPainter(painter);

        if (!isRefresh) {
            mapViewer.setAddressLocation(environment.getMapCenter());
            mapViewer.setZoom(5);
        }

        drawPanel.add(mapViewer);
    }


    public JPanel getMainPanel() {
        return mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        drawPanel = new JPanel();
        drawPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.add(drawPanel, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(454, 337), null, 0, false));
        drawPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 5), new Dimension(454, 5), null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 15), new Dimension(454, 14), null, 0, false));
        final Spacer spacer3 = new Spacer();
        mainPanel.add(spacer3, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, new Dimension(15, -1), new Dimension(14, 337), null, 0, false));
        final Spacer spacer4 = new Spacer();
        mainPanel.add(spacer4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, new Dimension(15, -1), new Dimension(14, 337), null, 0, false));
        configurePanel = new JPanel();
        configurePanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(configurePanel, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 40), new Dimension(-1, 40), new Dimension(-1, 40), 0, false));
        addRadioBtn = new JRadioButton();
        addRadioBtn.setSelected(true);
        addRadioBtn.setText("Add");
        configurePanel.add(addRadioBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteRadioBtn = new JRadioButton();
        deleteRadioBtn.setText("Delete");
        configurePanel.add(deleteRadioBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }


    private enum Mode {
        ADD, DELETE
    }

    private class MapMouseAdapter implements MouseListener {

        MapMouseAdapter() {
        }

        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 1) {
                Point p = e.getPoint();
                GeoPosition geo = mapViewer.convertPointToGeoPosition(p);
                GraphStructure graph = GraphStructure.getInstance();

                if (ConfigureWayPointsPanel.this.mode == Mode.ADD) {
                    graph.addWayPoint(geo);
                } else if (ConfigureWayPointsPanel.this.mode == Mode.DELETE) {
                    // Calculate the distances to the closest wayPoints
                    Map<Long, Double> distances = new HashMap<>();

                    graph.getWayPoints().forEach((k, v) -> distances.put(k, MapHelper.distance(v, geo)));

                    // TODO ask for confirmation from the user? (Visualize deleted routes as well)
                    distances.entrySet().stream()
                        .min(Comparator.comparing(Map.Entry::getValue))
                        .ifPresent(o -> graph.deleteWayPoint(o.getKey(), environment));

                    parent.refresh();
                }
                loadMap(true);
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }


}

